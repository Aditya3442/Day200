class LengthComparator implements Comparator<String>{
    @Override
    public int compare(String s1 , String s2) {
        return s1.length() - s2.length();
    }
}
class Solution {
    public boolean compare(String str1 , String str2) {
        if(str1.length() != str2.length() + 1)
           return false;
        int i = 0;
        int j = 0;
        while(i < str1.length()) {
            if(j < str2.length() && str1.charAt(i) == str2.charAt(j)) {
                i++;
                j++;
            }
            else {
                i++;
            }
        }
        if(i == str1.length() && j == str2.length())
          return true;
        return false;
    }
    public int longestStrChain(String[] words) {      
       int n = words.length;
       Arrays.sort(words , new LengthComparator());   
       int dp[] = new int[n];
       Arrays.fill(dp , 1);
       int maxi = 1;
       for(int i = 1; i < n; i++) {
          for(int j = 0; j < i; j++) {
              if(compare(words[i] , words[j]) && 1 + dp[j] > dp[i]) {
                 dp[i] = 1 + dp[j];
              }
          }
          maxi = Math.max(maxi , dp[i]);
       }
       return maxi;
    }
}
