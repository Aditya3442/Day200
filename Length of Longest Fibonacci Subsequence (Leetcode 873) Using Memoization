class Solution {
    public int solve(int j , int k , Map<Integer , Integer> map , int[] arr , int[][] dp) {
        if(dp[j][k] != -1)
          return dp[j][k];
         int i = arr[k] - arr[j];
         if(map.containsKey(i) && map.get(i) < j) {
            return dp[j][k] = 1 + solve(map.get(i) , j , map , arr , dp);
         }
         return dp[j][k] = 2;
    }
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer , Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++) {
           map.put(arr[i] , i);
        }
        int[][] dp = new int[n][n];
        for(int[] num : dp)
           Arrays.fill(num , -1);
        int maxi = 0;
        for(int j = 1; j < arr.length; j++) {
            for(int k = j + 1; k < arr.length; k++) {
                int length = solve(j , k , map , arr , dp);
                if(length >= 3) {
                    maxi = Math.max(maxi , length);
                }
            }
        }
        return maxi;
    }
}
